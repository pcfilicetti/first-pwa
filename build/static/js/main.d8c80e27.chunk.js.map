{"version":3,"sources":["Today/Today.js","History/History.js","App.js","serviceWorker.js","index.js"],"names":["Today","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","btcprice","ltcprice","ethprice","_this2","pusher","Pusher","cluster","encrypted","prices","subscribe","axios","get","then","response","setState","data","BTC","USD","localStorage","setItem","ETH","LTC","catch","error","console","log","post","_this3","navigator","onLine","getItem","setInterval","sendPricePusher","bind","price","react_default","a","createElement","className","Component","History","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","getBTCPrices","assertThisInitialized","getETHPrices","getLTCPrices","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","JSON","stringify","subtract","_this4","_this5","_this6","getTodayPrice","getYesterdayPrice","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","parse","App","href","target","rel","src_Today_Today","src_History_History","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8c80e27.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n    import './Today.css'\r\n    import axios from 'axios'\r\n    import Pusher from 'pusher-js'\r\n\r\n    class Today extends Component {\r\n        // Adds a class constructor that assigns the initial state values:\r\n        constructor () {\r\n            super();\r\n            this.state = {\r\n                btcprice: '',\r\n                ltcprice: '',\r\n                ethprice: ''\r\n            };\r\n        }\r\n        // This is called when an instance of a component is being created and inserted into the DOM.\r\n        componentWillMount () {\r\n            // establish a connection to Pusher\r\n            this.pusher = new Pusher('7da8b2b34903425e280e', {\r\n                cluster: 'us2',\r\n                encrypted: true\r\n            });\r\n            // Subscribe to the 'coin-prices' channel\r\n            this.prices = this.pusher.subscribe('coin-prices');\r\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n                .then(response => {\r\n                    this.setState({ btcprice: response.data.BTC.USD });\r\n                    localStorage.setItem('BTC', response.data.BTC.USD);\r\n\r\n                    this.setState({ ethprice: response.data.ETH.USD });\r\n                    localStorage.setItem('ETH', response.data.ETH.USD);\r\n\r\n                    this.setState({ ltcprice: response.data.LTC.USD });\r\n                    localStorage.setItem('LTC', response.data.LTC.USD);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n        sendPricePusher (data) {\r\n            axios.post('/prices/new', {\r\n                prices: data\r\n            })\r\n              .then(response => {\r\n                  console.log(response)\r\n              })\r\n              .catch(error => {\r\n                  console.log(error)\r\n              })\r\n        }\r\n        componentDidMount () {\r\n            if (!navigator.onLine) {\r\n                this.setState({ btcprice: localStorage.getItem('BTC') });\r\n                this.setState({ ethprice: localStorage.getItem('ETH') });\r\n                this.setState({ ltcprice: localStorage.getItem('LTC') });\r\n            }\r\n            setInterval(() => {\r\n                axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n                    .then(response => {\r\n                        this.sendPricePusher (response.data)\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    })\r\n            }, 10000)\r\n            // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes \r\n            this.prices.bind('prices', price => {\r\n                this.setState({ btcprice: price.prices.BTC.USD });\r\n                this.setState({ ethprice: price.prices.ETH.USD });\r\n                this.setState({ ltcprice: price.prices.LTC.USD });\r\n            }, this);\r\n        }\r\n        // The render method contains the JSX code which will be compiled to HTML.\r\n        render() {\r\n            return (\r\n                <div className=\"today--section container\">\r\n                    <h2>Current Price</h2>\r\n                    <div className=\"columns today--section__box\">\r\n                        <div className=\"column btc--section\">\r\n                            <h5>${this.state.btcprice}</h5>\r\n                            <p>1 BTC</p>\r\n                        </div>\r\n                        <div className=\"column eth--section\">\r\n                            <h5>${this.state.ethprice}</h5>\r\n                            <p>1 ETH</p>\r\n                        </div>\r\n                        <div className=\"column ltc--section\">\r\n                            <h5>${this.state.ltcprice}</h5>\r\n                            <p>1 LTC</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    export default Today;","import React, { Component } from 'react';\r\n    import './History.css'\r\n    import axios from 'axios'\r\n    import moment from 'moment'\r\n\r\n    \r\nclass History extends Component {\r\n    constructor () {\r\n      super();\r\n      this.state = {\r\n          todayprice: {},\r\n          yesterdayprice: {},\r\n          twodaysprice: {},\r\n          threedaysprice: {},\r\n          fourdaysprice: {}\r\n      }\r\n      this.getBTCPrices = this.getBTCPrices.bind(this);\r\n      this.getETHPrices = this.getETHPrices.bind(this);\r\n      this.getLTCPrices = this.getLTCPrices.bind(this);\r\n    }\r\n    // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\r\n    getETHPrices (date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\r\n    getBTCPrices (date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\r\n    getLTCPrices (date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the prices for the current date.\r\n    getTodayPrice () {\r\n        // Get today's date in timestamp\r\n        let t = moment().unix()\r\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n            .then(axios.spread((eth, btc, ltc) => {\r\n                let f = {\r\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n                    eth: eth.data.ETH.USD,\r\n                    btc: btc.data.BTC.USD,\r\n                    ltc: ltc.data.LTC.USD\r\n                }\r\n                // Set the state of todayprice to the content of the object f\r\n                localStorage.setItem('todayprice', JSON.stringify(f));\r\n                this.setState({ todayprice: f });\r\n            }));\r\n    }\r\n    // This function gets the prices for the yesterday.\r\n    getYesterdayPrice () {\r\n        // Get yesterday's date in timestamp\r\n        let t = moment().subtract(1, 'days').unix();\r\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n            .then(axios.spread((eth, btc, ltc) => {\r\n                let f = {\r\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n                    eth: eth.data.ETH.USD,\r\n                    btc: btc.data.BTC.USD,\r\n                    ltc: ltc.data.LTC.USD\r\n                }\r\n                // Set the state of yesterdayprice to the content of the object f\r\n                localStorage.setItem('yesterdayprice', JSON.stringify(f));\r\n                this.setState({ yesterdayprice: f });\r\n            }));\r\n    }\r\n    // This function gets the prices for the two days ago.\r\n    getTwoDaysPrice () {\r\n        // Get the date for two days ago in timestamp\r\n        let t = moment().subtract(2, 'days').unix();\r\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n            .then(axios.spread((eth, btc, ltc) => {\r\n                let f = {\r\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n                    eth: eth.data.ETH.USD,\r\n                    btc: btc.data.BTC.USD,\r\n                    ltc: ltc.data.LTC.USD\r\n                }\r\n                // Set the state of twodaysprice to the content of the object f\r\n                localStorage.setItem('twodaysprice', JSON.stringify(f));\r\n                this.setState({ twodaysprice: f });\r\n            }));\r\n    }\r\n    // This function gets the prices for the three days ago.\r\n    getThreeDaysPrice () {\r\n        // Get the date for three days ago in timestamp\r\n        let t = moment().subtract(3, 'days').unix();\r\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n            .then(axios.spread((eth, btc, ltc) => {\r\n                let f = {\r\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n                    eth: eth.data.ETH.USD,\r\n                    btc: btc.data.BTC.USD,\r\n                    ltc: ltc.data.LTC.USD\r\n                }\r\n                // Set the state of threedaysprice to the content of the object f\r\n                localStorage.setItem('threedaysprice', JSON.stringify(f));\r\n                this.setState({ threedaysprice: f });\r\n            }));\r\n    }\r\n    // This function gets the prices for the four days ago.\r\n    getFourDaysPrice () {\r\n        // Get the date for four days ago in timestamp\r\n        let t = moment().subtract(4, 'days').unix();\r\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n            .then(axios.spread((eth, btc, ltc) => {\r\n                let f = {\r\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n                    eth: eth.data.ETH.USD,\r\n                    btc: btc.data.BTC.USD,\r\n                    ltc: ltc.data.LTC.USD\r\n                }\r\n                // Set the state of fourdaysprice to the content of the object f\r\n                localStorage.setItem('fourdaysprice', JSON.stringify(f));\r\n                this.setState({ fourdaysprice: f });\r\n            }));\r\n    }\r\n    // This is called when an instance of a component is being created and inserted into the DOM.\r\n    componentWillMount () {\r\n        this.getTodayPrice();\r\n        this.getYesterdayPrice();\r\n        this.getTwoDaysPrice();\r\n        this.getThreeDaysPrice();\r\n        this.getFourDaysPrice();\r\n    }\r\n    componentDidMount () {\r\n        if (!navigator.onLine) {\r\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\r\n            this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\r\n            this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\r\n            this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\r\n            this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"history--section container\">\r\n                <h2>History (Past 5 days)</h2>\r\n                <div className=\"history--section__box\">\r\n                    <div className=\"history--section__box__inner\">\r\n                        <h4>{this.state.todayprice.date}</h4>\r\n                        <div className=\"columns\">\r\n                            <div className=\"column\">\r\n                                <p>1 BTC = ${this.state.todayprice.btc}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 ETH = ${this.state.todayprice.eth}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 LTC = ${this.state.todayprice.ltc}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"history--section__box__inner\">\r\n                        <h4>{this.state.yesterdayprice.date}</h4>\r\n                        <div className=\"columns\">\r\n                            <div className=\"column\">\r\n                                <p>1 BTC = ${this.state.yesterdayprice.btc}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 ETH = ${this.state.yesterdayprice.eth}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 LTC = ${this.state.yesterdayprice.ltc}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"history--section__box__inner\">\r\n                        <h4>{this.state.twodaysprice.date}</h4>\r\n                        <div className=\"columns\">\r\n                            <div className=\"column\">\r\n                                <p>1 BTC = ${this.state.twodaysprice.btc}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 ETH = ${this.state.twodaysprice.eth}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 LTC = ${this.state.twodaysprice.ltc}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"history--section__box__inner\">\r\n                        <h4>{this.state.threedaysprice.date}</h4>\r\n                        <div className=\"columns\">\r\n                            <div className=\"column\">\r\n                                <p>1 BTC = ${this.state.threedaysprice.btc}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 ETH = ${this.state.threedaysprice.eth}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 LTC = ${this.state.threedaysprice.ltc}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"history--section__box__inner\">\r\n                        <h4>{this.state.fourdaysprice.date}</h4>\r\n                        <div className=\"columns\">\r\n                            <div className=\"column\">\r\n                                <p>1 BTC = ${this.state.fourdaysprice.btc}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 ETH = ${this.state.fourdaysprice.eth}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 LTC = ${this.state.fourdaysprice.ltc}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default History;\r\n\r\n  ","// Import React and Component\nimport React, { Component } from 'react';\n// Import CSS from App.css\nimport './App.css';\n// Import the Today component to be used below\nimport Today from './Today/Today'\n// Import the History component to be used below\nimport History from './History/History'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n          <div className=\"topheader\">\n              <header className=\"container\">\n                  <nav className=\"navbar\">\n                      <div className=\"navbar-brand\">\n                          <span className=\"navbar-item\">PusherCoins</span>\n                      </div>\n                      <div className=\"navbar-end\">\n                          <a className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\">Pusher.com</a>\n                      </div>\n                  </nav>\n              </header>\n          </div>\n          <section className=\"results--section\">\n              <div className=\"container\">\n                  <h1>PusherCoins is a realtime price information about<br></br> BTC, ETH and LTC.</h1>\n              </div>\n              <div className=\"results--section__inner\">\n                  <Today />\n                  <History />\n              </div>\n          </section>\n      </div>\n    );\n  }\n}\n\nexport default App;","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}